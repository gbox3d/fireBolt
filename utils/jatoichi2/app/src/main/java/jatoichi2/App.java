/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package jatoichi2;

import com.fazecast.jSerialComm.SerialPort;
import org.json.JSONObject;

import javafx.application.Application;
import javafx.application.Platform;
import javafx.scene.Scene;
import javafx.scene.control.Alert;
import javafx.scene.control.Alert.AlertType;
import javafx.scene.control.Button;
import javafx.scene.control.ComboBox;
import javafx.scene.control.Label;
import javafx.scene.control.ScrollPane;
import javafx.scene.control.TextArea;
import javafx.scene.control.TextField;
import javafx.scene.layout.GridPane;
import javafx.scene.layout.VBox;
import javafx.stage.Stage;


public class App extends Application {

    public String applicationName = "jatoichi";
    private SerialPort serialPort;

    public static void main(String[] args) {
        launch(args);
    }

    @Override
    public void start(Stage primaryStage) {
        primaryStage.setTitle(applicationName);

        // 메인 레이아웃 설정
        VBox mainLayout = new VBox();
        Scene scene = new Scene(mainLayout, 640, 480);

        // Top Panel 설정
        GridPane topPanel = createTopPanel();
        mainLayout.getChildren().add(topPanel);

        // CLI Panel 설정
        VBox cliPanel = createCLIPanel();
        ScrollPane scrollPane = new ScrollPane(cliPanel);
        scrollPane.setFitToWidth(true);
        scrollPane.setFitToHeight(true);
        mainLayout.getChildren().add(scrollPane);

        primaryStage.setScene(scene);
        primaryStage.show();
    }

    private GridPane createTopPanel() {
        GridPane topPanel = new GridPane();

        ComboBox<String> portComboBox = new ComboBox<>();
        Button scanButton = new Button("Scan Ports");
        Button connectButton = new Button("Connect");

        scanButton.setOnAction(e -> scanPorts(portComboBox));
        connectButton.setOnAction(e -> {
            if ("Connect".equals(connectButton.getText())) {
                connectPort(portComboBox, connectButton);
            } else {
                disconnectPort(connectButton);
            }
        });

        topPanel.add(new Label("Ports:"), 0, 0);
        topPanel.add(portComboBox, 1, 0);
        topPanel.add(scanButton, 2, 0);
        topPanel.add(connectButton, 3, 0);

        return topPanel;
    }

    private VBox createCLIPanel() {
        VBox cliPanel = new VBox();

        TextArea outputArea = new TextArea();
        outputArea.setEditable(false);

        TextField commandField = new TextField();
        Button sendButton = new Button("Send");

        sendButton.setOnAction(e -> sendCommand(commandField.getText(), outputArea));

        cliPanel.getChildren().addAll(new Label("Command:"), commandField, sendButton, outputArea);

        return cliPanel;
    }

    private void scanPorts(ComboBox<String> portComboBox) {
        SerialPort[] ports = SerialPort.getCommPorts();
        portComboBox.getItems().clear();
        for (SerialPort port : ports) {
            portComboBox.getItems().add(port.getSystemPortName());
        }
    }

    private void connectPort(ComboBox<String> portComboBox, Button connectButton) {
        String selectedPort = portComboBox.getSelectionModel().getSelectedItem();
        if (selectedPort == null) {
            showAlert(AlertType.ERROR, "Please select a port first");
            return;
        }

        SerialPort port = SerialPort.getCommPort(selectedPort);
        port.setBaudRate(115200);

        if (port.openPort()) {
            setSerialPort(port);
            connectButton.setText("Disconnect");
            showAlert(AlertType.INFORMATION, "Connected to " + selectedPort);
        } else {
            showAlert(AlertType.ERROR, "Failed to connect to " + selectedPort);
        }
    }

    private void disconnectPort(Button connectButton) {
        SerialPort port = getSerialPort();
        if (port != null && port.closePort()) {
            setSerialPort(null);
            connectButton.setText("Connect");
            showAlert(AlertType.INFORMATION, "Serial connection closed");
        } else {
            showAlert(AlertType.ERROR, "Failed to close port");
        }
    }

    private void sendCommand(String command, TextArea outputArea) {
        SerialPort port = getSerialPort();
        if (port != null) {
            try {
                port.flushIOBuffers();
                port.writeBytes(command.getBytes(), command.length());
                String response = readStringFromUart(port);
                Platform.runLater(() -> outputArea.appendText("Sent: " + command + "\nReceived: " + response + "\n"));
            } catch (Exception e) {
                showAlert(AlertType.ERROR, "Failed to send command: " + e.getMessage());
            }
        } else {
            showAlert(AlertType.ERROR, "Not connected to any port");
        }
    }

    private synchronized String readStringFromUart(SerialPort port) {
        byte[] readBuffer = new byte[1024];
        StringBuilder responseBuilder = new StringBuilder();

        port.setComPortTimeouts(SerialPort.TIMEOUT_READ_SEMI_BLOCKING, 100, 0);

        int numRead;
        long startTime = System.currentTimeMillis();
        while (true) {
            numRead = port.readBytes(readBuffer, readBuffer.length);
            if (numRead > 0) {
                responseBuilder.append(new String(readBuffer, 0, numRead));
            }

            if (numRead == 0 && System.currentTimeMillis() - startTime > 2000) {
                break;
            }
        }

        return responseBuilder.toString();
    }

    private void showAlert(AlertType alertType, String message) {
        Alert alert = new Alert(alertType);
        alert.setContentText(message);
        alert.showAndWait();
    }

    public synchronized void setSerialPort(SerialPort port) {
        this.serialPort = port;
    }

    public synchronized SerialPort getSerialPort() {
        return serialPort;
    }

    public String getApplicationVersion() {
        return "0.0.1";
    }

    public Object getGreeting() {
        return "Hello world!";
    }
}
